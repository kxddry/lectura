services:
  minio:
    image: quay.io/minio/minio
    expose:
      - "9000:9000"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - ./minio/data:/data
    command: server /data --console-address ":9001"

  kafka:
    image: apache/kafka:latest
    hostname: kafka
    container_name: kafka
    expose:
      - "9092:9092"
      - "9093:9093"
    ports:
      - "9092:9092"

    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT #,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092 #,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093 #,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      CLUSTER_ID: test_id
    volumes:
      - ./kafka/data:/var/lib/kafka/data
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092" ]
      interval: 5s
      timeout: 2s
      retries: 10

  init-kafka:
    image: apache/kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      # blocks until kafka is reachable
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic file.uploaded --replication-factor 1 --partitions 1
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic asr.done --replication-factor 1 --partitions 1

      echo -e 'Following topics available:'
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list
      "

  uploader:
    build:
      context: .
      dockerfile: uploader/Dockerfile
    depends_on:
      - minio
      - init-kafka
      - kafka
    ports:
      - "8080:8080"
    volumes:
      - ./uploader/config.yaml:/app/config.yaml
    command: [ "/app/uploader/app" ]
  

  whisper-api:
    build:
      context: ./asr/model/
      dockerfile: Dockerfile
    depends_on:
      - minio
    environment:
      - WHISPER_MODEL=base
    expose:
      - "5678:5678"
    ports:
      - "5678:5678"
    volumes:
      - whisper-cache:/root/.cache/whisper
    restart: on-failure

#  asr-orchestrator:
#    build:
#      context: .
#      dockerfile: asr/Dockerfile
#    depends_on:
#      - kafka
#      - init-kafka
#      - minio
#      - whisper-api
#    restart: on-failure
#    volumes:
#      - ./asr/config.yaml:/app/config.yaml

# DEBUG ASR ORCHESTRATOR
  asr-orchestrator:
    build:
      context: .
      dockerfile: asr/Dockerfile-debug
    depends_on:
      - kafka
      - init-kafka
      - minio
      - whisper-api
    ports:
      - "40000:40000"
    cap_add:
      - SYS_PTRACE

    security_opt:
      - seccomp=unconfined

    restart: on-failure
    volumes:
      - ./asr/config.yaml:/app/config.yaml

    command: >
      /go/bin/dlv exec /app/asr/app
      --headless --listen=:40000 --api-version=2 --accept-multiclient --log


  frontend:
    build: ./frontend
    ports:
      - "3000:80"
    depends_on:
      - uploader
    restart: unless-stopped


volumes:
  whisper-cache:
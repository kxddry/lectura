# need:
#
# minio, postgres, kafka, init-kafka
#
# uploader, asr, summarizer
#
# whisper-api, (optional) summarizer-api
#
# api-gateway, updater
#
# auth
#
# frontend

services:
  minio:
    image: quay.io/minio/minio
    expose:
      - "9000:9000"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - ./minio/data:/data
    command: server /data --console-address ":9001"

  postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    expose:
      - "5432:5432"

  kafka:
    image: apache/kafka:latest
    hostname: kafka
    container_name: kafka
    expose:
      - "9092:9092"
      - "9093:9093"

    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT #,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092 #,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093 #,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      CLUSTER_ID: test_id
    volumes:
      - ./kafka/data:/var/lib/kafka/data
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092" ]
      interval: 5s
      timeout: 2s
      retries: 10
  
  init-kafka:
    image: apache/kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      # blocks until kafka is reachable
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic file.uploaded --replication-factor 1 --partitions 1
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic asr.done --replication-factor 1 --partitions 1
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic sum.done --replication-factor 1 --partitions 1

      echo -e 'Following topics available:'
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list
      "



  uploader:
    image: ghcr.io/kxddry/lectura-uploader
    depends_on:
      - minio
      - init-kafka
      - kafka
      - auth
    expose:
      - "8090"
    volumes:
      - ./.config/upload.yaml:/app/config.yaml
      - ./.keys/uploader-public.pem:/public.pem
      - ./.keys/uploader-private.pem:/private.pem
    environment:
      - CONFIG_PATH=/app/config.yaml

  whisper-api:
    image: ghcr.io/kxddry/lectura-whisper-api
    depends_on:
      - minio
    environment:
      - WHISPER_MODEL=turbo
    expose:
      - "5678"
    volumes:
      - whisper-cache:/root/.cache/whisper
    restart: on-failure

  asr:
    image: ghcr.io/kxddry/lectura-asr
    depends_on:
      - kafka
      - init-kafka
      - minio
      - whisper-api
    restart: on-failure
    environment:
      - CONFIG_PATH=/app/config.yaml
    volumes:
      - ./.config/asr.yaml:/app/config.yaml

  summarizer:
    image: ghcr.io/kxddry/lectura-summarizer
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CONFIG_PATH=/app/config.yaml
    depends_on:
      - kafka
      - init-kafka
    restart: unless-stopped
    volumes:
      - ./.config/sum.yaml:/app/config.yaml



  frontend:
    build: ./frontend
    ports:
      - "3000:80"

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - api-gateway
      - uploader

  auth:
    image: ghcr.io/kxddry/sso-auth
    environment:
      - CONFIG_PATH=/app/config.yaml
    depends_on:
      - migrator
    volumes:
      - ./.config/auth.yaml:/app/config.yaml
      - ./.keys/auth-public.pem:/public.pem
      - ./.keys/auth-private.pem:/private.pem
    expose:
      - "42042:42042"
  migrator:
    image: ghcr.io/kxddry/lectura-migrator
    environment:
      - CONFIG_PATH=/app/migrations.yaml
    volumes:
      - ./.config/migrations.yaml:/app/migrations.yaml
      - ./migrations/:/migrations/
    depends_on:
      - postgres

  api-gateway:
    image: ghcr.io/kxddry/lectura-api-gateway
    depends_on:
      - auth
      - uploader
    expose:
      - "8080"
    environment:
      - CONFIG_PATH=/app/config.yaml
    volumes:
      - ./.config/api.yaml:/app/config.yaml
      - ./.keys/api-gateway-private.pem:/private.pem
      - ./.keys/api-gateway-public.pem:/public.pem


  updater:
    build:
      context: .
      dockerfile: updater/Dockerfile
    environment:
      - CONFIG_PATH=/app/config.yaml
    depends_on:
      - postgres
      - kafka
      - init-kafka
    restart: unless-stopped
    volumes:
      - ./.config/upd.yaml:/app/config.yaml



volumes:
  whisper-cache:
  pgdata:
  ollama-data: